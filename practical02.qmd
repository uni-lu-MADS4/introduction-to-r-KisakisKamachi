---
title: "Getting started with R"
author: Kamachi Ojukwu
date: today
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code
my_letters <- c("A", "B", "C")
c(my_letters, my_letters)
```
> Your answer as text


* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters <- c("A", "B", "C")
c(my_letters, my_letters)

```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters

```

> Your answer as text
returns the english alphabets in lower case



* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code


```

> Your answer as text



* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code


```

> Your answer as text



### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
# Your answer in code
my_vec <- c(1:8)
my_vec+2
vec_1234 <- c(1:4)
my_vec + vec_1234




```



### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code
A <- matrix(c(4, 9, 10, 1, 5, 7), nrow = 3, ncol = 2)
dim(A)
A[2, 2]
A <- cbind(A, c(0, 1, 2))
A[1, 1] <- 0
t(A)
any(A > 10)
all(A < 10)






```


8. Are any values in `A` larger than 10? 
```{r}
# Your answer in code

```

9. Are all values in `A` smaller than 10?
```{r}
# Your answer in code

```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code
sum_values <- function(a, b) {
a_numeric <- as.numeric(a)
b_numeric <- as.numeric(b)
  
return(a_numeric + b_numeric)
}

#usage
sum_values("2", "5")




```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code
calculate_statistics <- function(values) {
  if (is.numeric(values) == FALSE) {
    return("Input must be a numeric vector.")
  }
  
  # mean
  mean_value <- mean(values, na.rm = TRUE)
  
  # median
  median_value <- median(values, na.rm = TRUE)
  
  # deviation
  sd_value <- sd(values, na.rm = TRUE)
  
  
  result <- c(mean_value, median_value, sd_value)
  return(result)
}


data <- c(1, 4, 4, 4, 5)
statistics <- calculate_statistics(data)


```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code



```


